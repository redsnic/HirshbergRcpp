i2 <- 2
h1 <- 3
h2 <- 4
b1 <- 5
b2 <- 6
b3 <- 7
o1 <- 8
# ruolo dei nodi
bias_nodes <- c(b1,b2,b3)
hidden_nodes <- c(h1,h2)
input_nodes <- c(i1,i2)
output_nodes <- c(o1)
# Archi
E <- matrix(
c(
i1,h1,
i1,h2,
i2,h1,
i2,h2,
h1,o1,
h2,o1,
b1,h1,
b2,h2,
b3,o1
),
byrow = TRUE, ncol=2
)
arrotonda <- function(x){ ifelse(x>=0.5,1,0) }
NN <- make.neural.network(0.2,1,input_nodes,bias_nodes,hidden_nodes,output_nodes,E,-1,1)
# epoche di learning
nEpochs <- 100
# input
input <- matrix(c(0,0,0,1,1,0,1,1), byrow = TRUE, ncol=2)
# output
expected_output <- matrix(c(0,1,1,0), byrow = TRUE, ncol=1)
training.data <- train(NN, input, output, nEpochs, extraOutput = TRUE)
NN[["plot"]]()
plot.weights(NN[["E"]](), training.data[["Ws"]])
plot.mse(training.data[["mse"]])
print.input.output(NN, input)
library("dplyr")
library("purrr")
source("Utils.R")
source("NN.R")
library("igraph")
library("ggplot2")
library("ggraph")
# nodi
i1 <- 1
i2 <- 2
h1 <- 3
h2 <- 4
b1 <- 5
b2 <- 6
b3 <- 7
b4 <- 8
o1 <- 9
o2 <- 10
# ruolo dei nodi
bias_nodes <- c(b1,b2,b3,b4)
hidden_nodes <- c(h1,h2)
input_nodes <- c(i1,i2)
output_nodes <- c(o1,o2)
# Archi
E <- matrix(
c(
i1,h1,
i1,h2,
i2,h1,
i2,h2,
h1,o1,
h1,o2,
h2,o1,
h2,o2,
b1,h1,
b2,h2,
b3,o1,
b4,o2
),
byrow = TRUE, ncol=2
)
NN <- make.neural.network(0.2,1,input_nodes,bias_nodes,hidden_nodes,output_nodes,E,-2.5,2.5)
# epoche di learning
nEpochs <- 50
# input
input <- matrix(c(0,0,0,1,1,0,1,1), byrow = TRUE, ncol=2)
# output
expected_output <- matrix(c(0,1,1,0,1,1,0,0), byrow = TRUE, ncol=2)
training.data <- train(NN, input, output, nEpochs, extraOutput = TRUE)
# nodi
i1 <- 1
i2 <- 2
h1 <- 3
h2 <- 4
b1 <- 5
b2 <- 6
b3 <- 7
o1 <- 8
# ruolo dei nodi
bias_nodes <- c(b1,b2,b3)
hidden_nodes <- c(h1,h2)
input_nodes <- c(i1,i2)
output_nodes <- c(o1)
# Archi
E <- matrix(
c(
i1,h1,
i1,h2,
i2,h1,
i2,h2,
h1,o1,
h2,o1,
b1,h1,
b2,h2,
b3,o1
),
byrow = TRUE, ncol=2
)
arrotonda <- function(x){ ifelse(x>=0.5,1,0) }
NN <- make.neural.network(0.2,1,input_nodes,bias_nodes,hidden_nodes,output_nodes,E,-1,1)
# epoche di learning
nEpochs <- 100
# input
input <- matrix(c(0,0,0,1,1,0,1,1), byrow = TRUE, ncol=2)
# output
expected_output <- matrix(c(0,1,1,0), byrow = TRUE, ncol=1)
training.data <- train(NN, input, output, nEpochs, extraOutput = TRUE)
NN[["plot"]]()
plot.weights(NN[["E"]](), training.data[["Ws"]])
plot.mse(training.data[["mse"]])
print.input.output(NN, input)
NN[["plot"]]()
plot.weights(NN[["E"]](), training.data[["Ws"]])
plot.mse(training.data[["mse"]])
print.input.output(NN, input)
library("dplyr")
library("purrr")
source("Utils.R")
source("NN.R")
library("igraph")
library("ggplot2")
library("ggraph")
# nodi
i1 <- 1
i2 <- 2
h1 <- 3
h2 <- 4
b1 <- 5
b2 <- 6
b3 <- 7
b4 <- 8
o1 <- 9
o2 <- 10
# ruolo dei nodi
bias_nodes <- c(b1,b2,b3,b4)
hidden_nodes <- c(h1,h2)
input_nodes <- c(i1,i2)
output_nodes <- c(o1,o2)
# Archi
E <- matrix(
c(
i1,h1,
i1,h2,
i2,h1,
i2,h2,
h1,o1,
h1,o2,
h2,o1,
h2,o2,
b1,h1,
b2,h2,
b3,o1,
b4,o2
),
byrow = TRUE, ncol=2
)
NN <- make.neural.network(0.2,1,input_nodes,bias_nodes,hidden_nodes,output_nodes,E,-2.5,2.5)
# epoche di learning
nEpochs <- 50
# input
input <- matrix(c(0,0,0,1,1,0,1,1), byrow = TRUE, ncol=2)
# output
expected_output <- matrix(c(0,1,1,0,1,1,0,0), byrow = TRUE, ncol=2)
training.data <- train(NN, input, output, nEpochs, extraOutput = TRUE)
# nodi
i1 <- 1
i2 <- 2
h1 <- 3
h2 <- 4
b1 <- 5
b2 <- 6
b3 <- 7
o1 <- 8
# ruolo dei nodi
bias_nodes <- c(b1,b2,b3)
hidden_nodes <- c(h1,h2)
input_nodes <- c(i1,i2)
output_nodes <- c(o1)
# Archi
E <- matrix(
c(
i1,h1,
i1,h2,
i2,h1,
i2,h2,
h1,o1,
h2,o1,
b1,h1,
b2,h2,
b3,o1
),
byrow = TRUE, ncol=2
)
arrotonda <- function(x){ ifelse(x>=0.5,1,0) }
NN <- make.neural.network(0.2,1,input_nodes,bias_nodes,hidden_nodes,output_nodes,E,-1,1)
# epoche di learning
nEpochs <- 100
# input
input <- matrix(c(0,0,0,1,1,0,1,1), byrow = TRUE, ncol=2)
# output
expected_output <- matrix(c(0,1,1,0), byrow = TRUE, ncol=1)
training.data <- train(NN, input, output, nEpochs, extraOutput = TRUE)
NN[["plot"]]()
plot.weights(NN[["E"]](), training.data[["Ws"]])
plot.mse(training.data[["mse"]])
print.input.output(NN, input)
# nodi
i1 <- 1
i2 <- 2
h1 <- 3
h2 <- 4
b1 <- 5
b2 <- 6
b3 <- 7
b4 <- 8
o1 <- 9
o2 <- 10
# ruolo dei nodi
bias_nodes <- c(b1,b2,b3,b4)
hidden_nodes <- c(h1,h2)
input_nodes <- c(i1,i2)
output_nodes <- c(o1,o2)
# Archi
E <- matrix(
c(
i1,h1,
i1,h2,
i2,h1,
i2,h2,
h1,o1,
h1,o2,
h2,o1,
h2,o2,
b1,h1,
b2,h2,
b3,o1,
b4,o2
),
byrow = TRUE, ncol=2
)
NN <- make.neural.network(0.2,1,input_nodes,bias_nodes,hidden_nodes,output_nodes,E,-2.5,2.5)
# epoche di learning
nEpochs <- 50
# input
input <- matrix(c(0,0,0,1,1,0,1,1), byrow = TRUE, ncol=2)
# output
expected_output <- matrix(c(0,1,1,0,1,1,0,0), byrow = TRUE, ncol=2)
training.data <- train(NN, input, output, nEpochs, extraOutput = TRUE)
NN[["plot"]]()
plot.weights(NN[["E"]](), training.data[["Ws"]])
plot.mse(training.data[["mse"]])
print.input.output(NN, input)
# nodi
i1 <- 1
i2 <- 2
h1 <- 3
h2 <- 4
b1 <- 5
b2 <- 6
b3 <- 7
o1 <- 8
# ruolo dei nodi
bias_nodes <- c(b1,b2,b3)
hidden_nodes <- c(h1,h2)
input_nodes <- c(i1,i2)
output_nodes <- c(o1)
# Archi
E <- matrix(
c(
i1,h1,
i1,h2,
i2,h1,
i2,h2,
h1,o1,
h2,o1,
b1,h1,
b2,h2,
b3,o1
),
byrow = TRUE, ncol=2
)
arrotonda <- function(x){ ifelse(x>=0.5,1,0) }
NN <- make.neural.network(0.2,1,input_nodes,bias_nodes,hidden_nodes,output_nodes,E,-1,1)
# epoche di learning
nEpochs <- 10000
# input
input <- matrix(c(0,0,0,1,1,0,1,1), byrow = TRUE, ncol=2)
# output
expected_output <- matrix(c(0,1,1,0), byrow = TRUE, ncol=1)
training.data <- train(NN, input, output, nEpochs, extraOutput = TRUE)
NN[["plot"]]()
plot.weights(NN[["E"]](), training.data[["Ws"]])
plot.mse(training.data[["mse"]])
print.input.output(NN, input)
NN[["plot"]]()
plot.weights(NN[["E"]](), training.data[["Ws"]])
plot.mse(training.data[["mse"]])
print.input.output(NN, input)
library("dplyr")
library("purrr")
source("Utils.R")
source("NN.R")
library("igraph")
library("ggplot2")
library("ggraph")
# nodi
i1 <- 1
i2 <- 2
h1 <- 3
h2 <- 4
b1 <- 5
b2 <- 6
b3 <- 7
b4 <- 8
o1 <- 9
o2 <- 10
# ruolo dei nodi
bias_nodes <- c(b1,b2,b3,b4)
hidden_nodes <- c(h1,h2)
input_nodes <- c(i1,i2)
output_nodes <- c(o1,o2)
# Archi
E <- matrix(
c(
i1,h1,
i1,h2,
i2,h1,
i2,h2,
h1,o1,
h1,o2,
h2,o1,
h2,o2,
b1,h1,
b2,h2,
b3,o1,
b4,o2
),
byrow = TRUE, ncol=2
)
NN <- make.neural.network(0.2,1,input_nodes,bias_nodes,hidden_nodes,output_nodes,E,-2.5,2.5)
# epoche di learning
nEpochs <- 5000
# input
input <- matrix(c(0,0,0,1,1,0,1,1), byrow = TRUE, ncol=2)
# output
expected_output <- matrix(c(0,1,1,0,1,1,0,0), byrow = TRUE, ncol=2)
training.data <- train(NN, input, output, nEpochs, extraOutput = TRUE)
# nodi
i1 <- 1
i2 <- 2
h1 <- 3
h2 <- 4
b1 <- 5
b2 <- 6
b3 <- 7
o1 <- 8
# ruolo dei nodi
bias_nodes <- c(b1,b2,b3)
hidden_nodes <- c(h1,h2)
input_nodes <- c(i1,i2)
output_nodes <- c(o1)
# Archi
E <- matrix(
c(
i1,h1,
i1,h2,
i2,h1,
i2,h2,
h1,o1,
h2,o1,
b1,h1,
b2,h2,
b3,o1
),
byrow = TRUE, ncol=2
)
NN <- make.neural.network(0.2,1,input_nodes,bias_nodes,hidden_nodes,output_nodes,E,-1,1)
# epoche di learning
nEpochs <- 10000
# input
input <- matrix(c(0,0,0,1,1,0,1,1), byrow = TRUE, ncol=2)
# output
expected_output <- matrix(c(0,1,1,0), byrow = TRUE, ncol=1)
training.data <- train(NN, input, output, nEpochs, extraOutput = TRUE)
NN[["plot"]]()
plot.weights(NN[["E"]](), training.data[["Ws"]])
plot.mse(training.data[["mse"]])
print.input.output(NN, input)
# nodi
i1 <- 1
i2 <- 2
h1 <- 3
h2 <- 4
b1 <- 5
b2 <- 6
b3 <- 7
b4 <- 8
o1 <- 9
o2 <- 10
# ruolo dei nodi
bias_nodes <- c(b1,b2,b3,b4)
hidden_nodes <- c(h1,h2)
input_nodes <- c(i1,i2)
output_nodes <- c(o1,o2)
# Archi
E <- matrix(
c(
i1,h1,
i1,h2,
i2,h1,
i2,h2,
h1,o1,
h1,o2,
h2,o1,
h2,o2,
b1,h1,
b2,h2,
b3,o1,
b4,o2
),
byrow = TRUE, ncol=2
)
NN <- make.neural.network(0.2,1,input_nodes,bias_nodes,hidden_nodes,output_nodes,E,-2.5,2.5)
# epoche di learning
nEpochs <- 5000
# input
input <- matrix(c(0,0,0,1,1,0,1,1), byrow = TRUE, ncol=2)
# output
expected_output <- matrix(c(0,1,1,0,1,1,0,0), byrow = TRUE, ncol=2)
training.data <- train(NN, input, output, nEpochs, extraOutput = TRUE)
NN[["plot"]]()
plot.weights(NN[["E"]](), training.data[["Ws"]])
plot.mse(training.data[["mse"]])
print.input.output(NN, input)
knitr::opts_chunk$set(eval = FALSE, fig.align = "center")
source("plots.R")
library(Rcpp)
library(purrr)
library(pryr)
library(dplyr)
library(profmem)
sourceCpp("Utils.cpp", cacheDir = getwd())
sourceCpp("NWSW.cpp", cacheDir = getwd())
sourceCpp("Hirshberg.cpp", cacheDir = getwd())
source("RUtils.R")
seq1 <- read_fasta("COVID_CHINA.fasta")
seq2 <- read_fasta("COVID_USA.fasta")
a_HIRSH <- align_Hirshberg(seq1, seq2, FALSE,
nucleotides.order,
DNA.base.matrix,
-1)
score_alignment(seq1, seq2, FALSE,
nucleotides.order,
DNA.base.matrix,
-1, a_HIRSH)
setwd("git/HirshbergRcpp")
# Score per l'allineamento dei genomi di COVID cinese e statunitense
seq1 <- read_fasta("COVID_CHINA.fasta")
seq2 <- read_fasta("COVID_USA.fasta")
a_HIRSH <- align_Hirshberg(seq1, seq2, FALSE,
nucleotides.order,
DNA.base.matrix,
-1)
score_alignment(seq1, seq2, FALSE,
nucleotides.order,
DNA.base.matrix,
-1, a_HIRSH)
knitr::opts_chunk$set(eval = FALSE, fig.align = "center")
source("plots.R")
library(Rcpp)
library(purrr)
library(pryr)
library(dplyr)
library(profmem)
sourceCpp("Utils.cpp", cacheDir = getwd())
sourceCpp("NWSW.cpp", cacheDir = getwd())
sourceCpp("Hirshberg.cpp", cacheDir = getwd())
source("RUtils.R")
space.plot
time.plot
time.plot.log
# Score per l'allineamento dei genomi di COVID cinese e statunitense
seq1 <- read_fasta("COVID_CHINA.fasta")
seq2 <- read_fasta("COVID_USA.fasta")
a_HIRSH <- align_Hirshberg(seq1, seq2, FALSE,
nucleotides.order,
DNA.base.matrix,
-1)
score_alignment(seq1, seq2, FALSE,
nucleotides.order,
DNA.base.matrix,
-1, a_HIRSH)
